<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0" metadata-complete="false">
	<!-- web.xml 文件 xsd 文件必须指定版本，当前使用 3.0 版本 -->
	<!-- Web 容器中，各元素加载顺序：context-param -> listener -> filter -> servlet；而同类型之间的实际调用顺序是由对应的 mapping 的顺序决定的 -->

	<!-- Web 应用名称 -->
	<display-name>base</display-name>
	<!-- 描述信息 -->
	<description>基础框架</description>

	<!-- contextConfigLocation 缺省配置，则默认加载 /WEB-INF/applicationContext.xml -->
	<!-- 定义 Spring 的 Root 容器，用于配置所有的 Servlets 以及 Filters，多个配置文件用逗号隔开 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:spring/spring-context.xml
		</param-value>
	</context-param>
	<!-- Listener 创建 Spring 容器，加载 contextConfigLocation 中的配置文件 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 防止内存溢出监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!-- Servlet 处理请求，Spring MVC 核心分发器 -->
	<servlet>
		<servlet-name>mvcServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				classpath:spring/spring-servlet.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>mvcServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- Filter 字符集过滤器 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<!-- 强制转码 -->
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Filter Druid Web 监控过滤器 -->
	<filter>
		<filter-name>DruidWebStatFilter</filter-name>
		<filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
		<!-- 排除无需监控的 URL -->
		<init-param>
			<param-name>exclusions</param-name>
			<param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
		</init-param>
		<!-- druid 0.2.7 版本开始支持 profile，配置 profileEnable 能够监控单个 url 调用的 sql 列表 -->
		<init-param>
			<param-name>profileEnable</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>DruidWebStatFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Servlet Druid 监控视图 -->
	<!-- StatViewSerlvet 展示出来的监控信息比较敏感，是系统运行的内部情况，如果你需要做访问控制，可以配置 allow和 deny 这两个参数 -->
	<!-- 详细配置参见：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE -->
	<servlet>
		<servlet-name>DruidStatView</servlet-name>
		<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
		<init-param>
			<param-name>allow</param-name>
			<param-value>127.0.0.1</param-value>
		</init-param>
		<!-- <init-param> -->
		<!-- <param-name>deny</param-name> -->
		<!-- <param-value>128.242.127.4</param-value> -->
		<!-- </init-param> -->
	</servlet>
	<servlet-mapping>
		<servlet-name>DruidStatView</servlet-name>
		<url-pattern>/druid/*</url-pattern>
	</servlet-mapping>
</web-app>